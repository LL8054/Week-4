<<<<<<< HEAD
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
## This is a markdown file
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
q()
install.packages("KernSmooth"")
library(kernsmooth)
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(swirl)
swirl()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_lis
cls_list
class(cls_list)
cls_list
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls-vect)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- [,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,5,5,5,6,6,6))
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_ vals <- lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem elem[2]))
lapply(unique_vals, function(elem) elem[2]))
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric)1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
exit
bye()
library(datasets)
datasets(iris)
data(iris)
?iris
iris
tapply(sepal.length, species, mean)
tapply(Sepal.Length, Species, mean)
tapply(iris, Sepal.Length, Species, mean)
tapply(iris, Sepal.Length, mean)
tapply(iris$sepal.length, iris$species, mean)
tapply(iris$Speal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[1:4]1, mean)
apply(iris[1:4],1, mean)
apply(iris[1:4],2, mean)
?apply
apply(iris[,1:4],2, mean)
apply(iris, 2, mean)
apply(iris,1,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
[tapply(mtcars$hp,mtcars$cyl,mean),1] - [tapply(mtcars$hp,mtcars$cyl,mean),3]
i <- tapply(mtcars$mpg,mtcars$cyl,mean)
i
i[3]-i[1]
tapply(mtcars$hp,mtcars$cyl,mean),[1] - tapply(mtcars$hp,mtcars$cyl,mean),[3]
tapply(mtcars$hp,mtcars$cyl,mean)[1] - tapply(mtcars$hp,mtcars$cyl,mean)[3]
tapply(mtcars$hp,mtcars$cyl,mean)[3]
rm(i)
i
i <- tapply(mtcars$hp, mtcars$cyl, mean)
i
i[3] - i[1]
tapply(mtcars$hp, mtcars$cyl, mean)[3] - tapply(mcars$hp, mtcars$cyl, mean)[1]
tapply(mtcars$hp, mtcars$cyl, mean)[3] - tapply(mtcars$hp, mtcars$cyl, mean)[1]
debug(ls)
ls
debug(ls)
ls(2)
bye()
exit
close
close()
exit()
quit()
quit
quit
library("swirl")
swirl()
quit9)
quit()
library("swirl")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
play()
d2 <- Sys.Date()
d2
nxt()
d1
unclass(d1)
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
bye()
library(datasets)
head(airquality)
str(airquality)
data <- read.csv("outcome-of-care-measures.csv")
setwd("~/datasciencecoursera/ProgrammingAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
data
head(data)
colnames(data)
head(data[,outcome_col])
head(data)
data[,outcome_col]
outcome_col
data <- read.csv("outcome-of-care-measures.csv")
outcome_col <- 23
outcome_col
data[,outcome_col]
head(data[,outcome_col])
=======
master <- rbind(master,data[i,])
}
}
for (i in 1:nrow(data)) {
if ("MD" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master
dim(master)
master[,2]
dim(master)
master[,23]
master[34,]
master[34,2]
min(master[,23])
master[,23]
which.min(apply(master))
?which.min
which.min(master[,23])
master[34,23]
master[34,2]
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best.R')
rm(data)
rm(master)
rm(outcome)
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best.R')
best("TX", "heart attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best.R')
best("TX", "heart attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best.R')
best("TX", "heart attack")
## Finds the best hospital in a state for a named outcome
best <- function(state, outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## Checks validity of state input.
state_check <- match(state,unique(data[,7]))
if (is.na(state_check == TRUE)) {
stop("invalid state")
}
## Checks validity of outcome input.
possible_outcomes <- c("heart attack", "heart failure", "pneumonia")
outcome_check <- match(outcome,possible_outcomes)
if (is.na(outcome_check == TRUE)) {
stop("invalid outcome")
}
if (outcome == "heart attack") outcome_col <- 11
if (outcome == "heart failure") outcome_col <- 17
if (outcome == "pneumonia") outcome_col <- 23
## If both state and output input are valid, returns char vector of name of
## hospital with the best 30-day mortality rate in that state.
>>>>>>> a20935c970b00bfcafca88876f059176bc1c3bf1
master <- data.frame()
for (i in 1:nrow(data)) {
if (state == data[i,7]) {
master <- rbind(master,data[i,])
}
}
<<<<<<< HEAD
master <- data.frame()
for (i in 1:nrow(data)) {
if ("TX" == data[i,7]) {
=======
hospital_name <- master[which.min(master[,outcome_col], 2]
hospital_name
}
## Finds the best hospital in a state for a named outcome
best <- function(state, outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## Checks validity of state input.
state_check <- match(state,unique(data[,7]))
if (is.na(state_check == TRUE)) {
stop("invalid state")
}
## Checks validity of outcome input.
possible_outcomes <- c("heart attack", "heart failure", "pneumonia")
outcome_check <- match(outcome,possible_outcomes)
if (is.na(outcome_check == TRUE)) {
stop("invalid outcome")
}
if (outcome == "heart attack") outcome_col <- 11
if (outcome == "heart failure") outcome_col <- 17
if (outcome == "pneumonia") outcome_col <- 23
## If both state and output input are valid, returns char vector of name of
## hospital with the best 30-day mortality rate in that state.
master <- data.frame()
for (i in 1:nrow(data)) {
if (state == data[i,7]) {
master <- rbind(master,data[i,])
}
}
hospital_name <- master[which.min(master[,outcome_col]), 2]
hospital_name
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
best("MD", "pneumonia")
best("MD", "heart attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best.R')
master <- data.frame()
for (i in 1:nrow(data)) {
if (MD == data[i,7]) {
master <- rbind(master,data[i,])
}
}
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
for (i in 1:nrow(data)) {
if (MD == data[i,7]) {
master <- rbind(master,data[i,])
}
}
for (i in 1:nrow(data)) {
if ("MD"" == data[i,7]) {
>>>>>>> a20935c970b00bfcafca88876f059176bc1c3bf1
master <- rbind(master,data[i,])
}
}
master
<<<<<<< HEAD
dim(master)
head(master)
head(master[,outcome_col])
class(master[,outcome_col])
min(master[,outcome_col]
)
order(master$master[,outcome_col])
x <- as.numeric(as.character(master[,outcome_col]))
x
min(x)
smallest <- min(x, na.rm=TRUE)
smallest
?ave
master_rank <- ave(master[,outcome_col], FUN = mean)
master_rank <- ave(master[,outcome_col], FUN = mean, is.na=FALSE)
master_rank <- ave(master[,outcome_col], FUN = mean, is.na=TRUE)
master_rank
dim(master_rank)
tail(master_rank)
master_rank <- ave(master[,outcome_col], FUN = mean, na.rm=TRUE)
master_rank
master_rank <- ave(as.integer(master[,outcome_col]), FUN = mean, na.rm=TRUE)
master_rank
master[,outcome_col]
?sapply
?subset
master
subset(master, select = c(master[,2], master[,7], master[,outcome_col]))
subset(master, select = c(master[,2], master[,7], master[,outcome_col]), na.rm=TRUE)
subset(master, select = c(master[,2], master[,7], master[,outcome_col]))
subset(master, select = master[,outcome_col])
subset(master, select = State)
master
subset_master <- subset(master, select = State)
subset_master
head(subset_master)
str(subset_master)
subset_master <- subset(master, State == state, select = c(Hospital.Name, State))
subset_master <- subset(master, state == state, select = c(Hospital.Name, State))
class(master[,outcome_col])
master[,outcome_col] <- as.numeric(master[,outcome_col])
class(master[,outcome_col])
order(master$master[,outcome_col])
state_data <- split(data,data$State)
state_data
dim(state_data)
head(state_data)
subset_master
master
head(master)
order(master[,outcome_col])
master_ranked <- ave(master[,outcome_col], master$State, FUN=rank)
master_ranked
master$Rank <- ave(master[,outcome_col], master$State, FUN=rank)
master$Rank
colnames(master)
master_parsed <- data.frame()
master_parsed <- c(master[,2], master[,7], master[,outcome_col], master$Rank)
master_parsed
master2 <- data.frame()
master2
master2 <- subset(data, data[,t]==state)
master2 <- subset(data, data[,t]=state)
master2 <- subset(data, data[,7]=state)
master2 <- subset(data, data[,7]==state)
master2 <- subset(data, data[,7]=="TX")
master2
master[0,7]
master2[0,7]
colnames(master)
state = "TX"
rm(master)
master <- subset(data, data[,7]=state)
master <- subset(data, data[,7]==state)
master[,outcome_col] <- as.numeric(master[,outcome_col])
class(master[,outcome_col])
master$Rank <- ave(master[,outcome_col], master$State, FUN=rank)
rm(master2)
rm(subset_master)
?order
master[order(master, na.last=NA)]
master[with(master, order(master[,47], master[,2]))]
master[with(master, order(master[,47], master[,2])),]
zz <- master[with(master, order(master[,47], master[,2])),]
zz(head)
head(zz)
rm(zz)
master_sorted <- master[with(master, order(master[,47], master[,2])),]
master_sorted[,2]
master_sorted[,outcome_col]
head(master_sorted[,2])
head(master_sorted[,2], n=11)
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
num = "best"
class(num)
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital(
"MD", "heart attack", "worst")
data <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", colClasses = "character")
master <- data.frame()
master <- subset(data, data[,7]==state)
master <- subset(data, data[,7]=="MD")
master[,outcome_col] <- as.numeric(master[,outcome_col])
outcome_col <- 11
master[,outcome_col] <- as.numeric(master[,outcome_col])
master$Rank <- ave(master[,outcome_col], master$State, FUN=rank)
master_sorted <- master[with(master, order(master[,47], master[,2])),]
num = "worst"
length(master_sorted)
master_sorted[47,2]
master_sorted[47,]
master_sorted[46,]
min(master[,outcome_col])
class(outcome_col)
class(master[,outcome_col])
max(master[,outcome_col])
max(master[,outcome_col], na.rm=FALSE)
max(master[,outcome_col], na.rm=TRUE)
min(master[,outcome_col], na.rm=TRUE)
rankhospital("MD", "heart attack", "best")
nrows(master)
nrow(master)
?print
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
=======
for (i in 1:nrow(data)) {
if ("MD"" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
for (i in 1:nrow(data)) {
if (MD == data[i,7]) {
master <- rbind(master,data[i,])
}
master}
master
nrow(data)
for (i in 1:nrow(data)) {
if ("MD"" == data[i,7]) {
master <- rbind(master,data[i,])
}
master}
for (i in 1:nrow(data)) {
if ("MD"" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
for (i in 1:nrow(data)) {
if ("MD"" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master <- data.frame()
master
master
master <- data.frame()
for (i in 1:nrow(data)) {
if (state == data[i,7]) {
master <- rbind(master,data[i,])
}
}
for (i in 1:nrow(data)) {
if ("MD" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master[,23]
class(master[,23])
xx <- sapply(master[,23])
xx <- sapply(xx,master[,23])
master[,23] <- "numeric"
class(master[,23])
master[,23]
for (i in 1:nrow(data)) {
if ("MD" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master
master[,23]
master <- data.frame()
for (i in 1:nrow(data)) {
if ("MD" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master[,23]
f <- transform(master, master[,23] = as.numeric(master[,23]))
f <- transform(master, d = as.numeric(master[,23]))
f
dim(f)
rm(f)
f <- transform(master, d = as.numeric(master[,23]))
dim(f)
colnames(f)
rm(f)
f <- transform(master, as.numeric(master[,23]))
f
class(f)
class(f[,23])
f[,23]
rm(f)
class(master[,23])
as.numeric(as.character(master$23))
master[,23] <- sapply(master[,23], as.numeric)
master[,23]
class(master[,23])
which.min(master[,23])
master[34,2]
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best.R')
best("TX", "heart attack")
warnings()
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
x<-c(1,1,2)
x
which.min(c)
which.min(x)
## Finds the best hospital in a state for a named outcome
best <- function(state, outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## Checks validity of state input.
state_check <- match(state,unique(data[,7]))
if (is.na(state_check == TRUE)) {
stop("invalid state")
}
## Checks validity of outcome input.
possible_outcomes <- c("heart attack", "heart failure", "pneumonia")
outcome_check <- match(outcome,possible_outcomes)
if (is.na(outcome_check == TRUE)) {
stop("invalid outcome")
}
if (outcome == "heart attack") outcome_col <- 11
if (outcome == "heart failure") outcome_col <- 17
if (outcome == "pneumonia") outcome_col <- 23
## If both state and output input are valid, returns char vector of name of
## hospital with the best 30-day mortality rate in that state.
master <- data.frame()
for (i in 1:nrow(data)) {
if (state == data[i,7]) {
master <- rbind(master,data[i,])
}
}
##hospital_name <- master[which.min(master[,outcome_col]), 2]
hospital_name <- master[match(min(master[,outcome_col]),master[,outcome_col]), 2]
hospital_name
}
best("TX", "heart attack")
best("TX", "heart failure")
## Finds the best hospital in a state for a named outcome
best <- function(state, outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## Checks validity of state input.
state_check <- match(state,unique(data[,7]))
if (is.na(state_check == TRUE)) {
stop("invalid state")
}
## Checks validity of outcome input.
possible_outcomes <- c("heart attack", "heart failure", "pneumonia")
outcome_check <- match(outcome,possible_outcomes)
if (is.na(outcome_check == TRUE)) {
stop("invalid outcome")
}
if (outcome == "heart attack") outcome_col <- 11
if (outcome == "heart failure") outcome_col <- 17
if (outcome == "pneumonia") outcome_col <- 23
## If both state and output input are valid, returns char vector of name of
## hospital with the best 30-day mortality rate in that state.
master <- data.frame()
for (i in 1:nrow(data)) {
if (state == data[i,7]) {
master <- rbind(master,data[i,])
}
}
hospital_name <- master[which.min(master[,outcome_col]), 2]
##hospital_name <- master[match(min(master[,outcome_col]),master[,outcome_col]), 2]
hospital_name
}
best("TX", "heart failure")
x
min(x)
match(1,x)
match(x,1)
match(x,2)
y <- match(x,2)
y
length(y)
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
master <- data.frame()
for (i in 1:nrow(data)) {
if (state == data[i,7]) {
master <- rbind(master,data[i,])
}
}
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
rm(master)
master <- data.frame()
for (i in 1:nrow(data)) {
if (state == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master <- data.frame()
for (i in 1:nrow(data)) {
if ("MD" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
outcome_col <- 23
smallest <- min(master[,outcome_col])
smallest
master[,outcome_col]
as.numeric(as.character(master[,outcome_col]))
x <- as.numeric(as.character(master[,outcome_col]))
min(x)
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("MD", "pneumonia")
smallest <- min(as.numeric(as.character(master[,outcome_col])))
smallest_list <- match(master, smallest)
smallest_list
master
smallest_list <- match(master[,outcome_col], smallest)
smallest_list
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("MD", "pneumonia")
unique(smallest_list
)
length(unique(smallest_list)
)
length(smallest_list)
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("MD", "pneumonia")
best("TX", "heart attack")
best("TX", heart failure"")
best("TX", "heart failure"")
best("TX", "heart failure)
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attac")
best("BB", "heart attack")
beste("NY", "hert attack")
best("NY", "hert attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart failure")
smallest_list
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
length(smallest_list)
small_list[35]
smallest_list[35]
smallest_list[34]
class(smallest_list[34])
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
smallest_list[34]
class(smallest_list[34])
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
traceback()
smallest_list[34]
x <- smallest_list[34] > 0
x
x <- smallest_list[33] > 0
x
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
order(master[2],)
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
smallest
smallest_list
final <- data.frame()
final
for(i in 1:length(smallest_list)) {
if (!is.na(smallest_list[i])) {
final <- rbind(final,master[i,])
}
}
final
dim(final)
final[,2]
sort.final <- with(final, final[order(2),])
sort.final
sort.final[1,2]
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
best("MD", "pneumonia")
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
outcome_col <- 11
master <- data.frame()
for (i in 1:nrow(data)) {
if ("TX" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master[,7]
smallest <- min(as.numeric(as.character(master[,outcome_col])))
smallest
master
length(master[,11])
master <- data.frame()
for (i in 1:nrow(data)) {
if (state == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master <- data.frame()
for (i in 1:nrow(data)) {
if ("TX" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
length(master)
master[,7]
unique(master[,7])
master[,11]
smallest
class(smallest[,11])
class(master[,11])
as.numeric(as.character(master[,11]))
min(as.numeric(as.character(master[,11])))
min(as.numeric(as.character(master[,11])), na.rm=TRUE)
smallest_list <- match(master[,outcome_col], smallest)
final <- data.frame()
for(i in 1:length(smallest_list)) {
if (!is.na(smallest_list[i])) {
final <- rbind(final,master[i,])
}
}
sort.final <- with(final, final[order(2),])
hospital_name <- sort.final[1,2]
hospital_name
smallest
smallest <- min(as.numeric(as.character(master[,11])), na.rm=TRUE)
smallest
smallest_list <- match(master[,outcome_col], smallest)
ngth(unique(smallest_list))>2) {
final <- data.frame()
for(i in 1:length(smallest_list)) {
if (!is.na(smallest_list[i])) {
final <- rbind(final,master[i,])
}
}
sort.final <- with(final, final[order(2),])
hospital_name <- sort.final[1,2]
hospital_name
final <- data.frame()
for(i in 1:length(smallest_list)) {
if (!is.na(smallest_list[i])) {
final <- rbind(final,master[i,])
}
}
length(smallest_list)
unique(smallest_list)
smallest_list
master[,outcome_col]
x <- as.numeric(as.character(master[,outcome_col]))
x
smallest <- min(x, na.rm=TRUE)
smallest
x
smallest_list <- match(x, smallest)
smallest_list
final <- data.frame()
for(i in 1:length(smallest_list)) {
if (!is.na(smallest_list[i])) {
final <- rbind(final,master[i,])
}
}
sort.final <- with(final, final[order(2),])
hospital_name <- sort.final[1,2]
hospital_name
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best2.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best.R')
source('~/LL/Coursera/Courses/R Programming/Week 4/Week 4 Assignment/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
>>>>>>> a20935c970b00bfcafca88876f059176bc1c3bf1
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
<<<<<<< HEAD
submit()
quit
bye()
exit
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
=======
bye()
quit()
>>>>>>> a20935c970b00bfcafca88876f059176bc1c3bf1
