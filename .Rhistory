git remote add origin https://github.com/LL8054/datasciencecoursera.git
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
## This is a markdown file
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
q()
install.packages("KernSmooth"")
library(kernsmooth)
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(swirl)
swirl()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_lis
cls_list
class(cls_list)
cls_list
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls-vect)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- [,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,5,5,5,6,6,6))
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_ vals <- lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem elem[2]))
lapply(unique_vals, function(elem) elem[2]))
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric)1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
exit
bye()
library(datasets)
datasets(iris)
data(iris)
?iris
iris
tapply(sepal.length, species, mean)
tapply(Sepal.Length, Species, mean)
tapply(iris, Sepal.Length, Species, mean)
tapply(iris, Sepal.Length, mean)
tapply(iris$sepal.length, iris$species, mean)
tapply(iris$Speal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[1:4]1, mean)
apply(iris[1:4],1, mean)
apply(iris[1:4],2, mean)
?apply
apply(iris[,1:4],2, mean)
apply(iris, 2, mean)
apply(iris,1,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
[tapply(mtcars$hp,mtcars$cyl,mean),1] - [tapply(mtcars$hp,mtcars$cyl,mean),3]
i <- tapply(mtcars$mpg,mtcars$cyl,mean)
i
i[3]-i[1]
tapply(mtcars$hp,mtcars$cyl,mean),[1] - tapply(mtcars$hp,mtcars$cyl,mean),[3]
tapply(mtcars$hp,mtcars$cyl,mean)[1] - tapply(mtcars$hp,mtcars$cyl,mean)[3]
tapply(mtcars$hp,mtcars$cyl,mean)[3]
rm(i)
i
i <- tapply(mtcars$hp, mtcars$cyl, mean)
i
i[3] - i[1]
tapply(mtcars$hp, mtcars$cyl, mean)[3] - tapply(mcars$hp, mtcars$cyl, mean)[1]
tapply(mtcars$hp, mtcars$cyl, mean)[3] - tapply(mtcars$hp, mtcars$cyl, mean)[1]
debug(ls)
ls
debug(ls)
ls(2)
bye()
exit
close
close()
exit()
quit()
quit
quit
library("swirl")
swirl()
quit9)
quit()
library("swirl")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
play()
d2 <- Sys.Date()
d2
nxt()
d1
unclass(d1)
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
bye()
library(datasets)
head(airquality)
str(airquality)
data <- read.csv("outcome-of-care-measures.csv")
setwd("~/datasciencecoursera/ProgrammingAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
data
head(data)
colnames(data)
head(data[,outcome_col])
head(data)
data[,outcome_col]
outcome_col
data <- read.csv("outcome-of-care-measures.csv")
outcome_col <- 23
outcome_col
data[,outcome_col]
head(data[,outcome_col])
master <- data.frame()
for (i in 1:nrow(data)) {
if (state == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master <- data.frame()
for (i in 1:nrow(data)) {
if ("TX" == data[i,7]) {
master <- rbind(master,data[i,])
}
}
master
dim(master)
head(master)
head(master[,outcome_col])
class(master[,outcome_col])
min(master[,outcome_col]
)
order(master$master[,outcome_col])
x <- as.numeric(as.character(master[,outcome_col]))
x
min(x)
smallest <- min(x, na.rm=TRUE)
smallest
?ave
master_rank <- ave(master[,outcome_col], FUN = mean)
master_rank <- ave(master[,outcome_col], FUN = mean, is.na=FALSE)
master_rank <- ave(master[,outcome_col], FUN = mean, is.na=TRUE)
master_rank
dim(master_rank)
tail(master_rank)
master_rank <- ave(master[,outcome_col], FUN = mean, na.rm=TRUE)
master_rank
master_rank <- ave(as.integer(master[,outcome_col]), FUN = mean, na.rm=TRUE)
master_rank
master[,outcome_col]
?sapply
?subset
master
subset(master, select = c(master[,2], master[,7], master[,outcome_col]))
subset(master, select = c(master[,2], master[,7], master[,outcome_col]), na.rm=TRUE)
subset(master, select = c(master[,2], master[,7], master[,outcome_col]))
subset(master, select = master[,outcome_col])
subset(master, select = State)
master
subset_master <- subset(master, select = State)
subset_master
head(subset_master)
str(subset_master)
subset_master <- subset(master, State == state, select = c(Hospital.Name, State))
subset_master <- subset(master, state == state, select = c(Hospital.Name, State))
class(master[,outcome_col])
master[,outcome_col] <- as.numeric(master[,outcome_col])
class(master[,outcome_col])
order(master$master[,outcome_col])
state_data <- split(data,data$State)
state_data
dim(state_data)
head(state_data)
subset_master
master
head(master)
order(master[,outcome_col])
master_ranked <- ave(master[,outcome_col], master$State, FUN=rank)
master_ranked
master$Rank <- ave(master[,outcome_col], master$State, FUN=rank)
master$Rank
colnames(master)
master_parsed <- data.frame()
master_parsed <- c(master[,2], master[,7], master[,outcome_col], master$Rank)
master_parsed
master2 <- data.frame()
master2
master2 <- subset(data, data[,t]==state)
master2 <- subset(data, data[,t]=state)
master2 <- subset(data, data[,7]=state)
master2 <- subset(data, data[,7]==state)
master2 <- subset(data, data[,7]=="TX")
master2
master[0,7]
master2[0,7]
colnames(master)
state = "TX"
rm(master)
master <- subset(data, data[,7]=state)
master <- subset(data, data[,7]==state)
master[,outcome_col] <- as.numeric(master[,outcome_col])
class(master[,outcome_col])
master$Rank <- ave(master[,outcome_col], master$State, FUN=rank)
rm(master2)
rm(subset_master)
?order
master[order(master, na.last=NA)]
master[with(master, order(master[,47], master[,2]))]
master[with(master, order(master[,47], master[,2])),]
zz <- master[with(master, order(master[,47], master[,2])),]
zz(head)
head(zz)
rm(zz)
master_sorted <- master[with(master, order(master[,47], master[,2])),]
master_sorted[,2]
master_sorted[,outcome_col]
head(master_sorted[,2])
head(master_sorted[,2], n=11)
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
num = "best"
class(num)
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital(
"MD", "heart attack", "worst")
data <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", colClasses = "character")
master <- data.frame()
master <- subset(data, data[,7]==state)
master <- subset(data, data[,7]=="MD")
master[,outcome_col] <- as.numeric(master[,outcome_col])
outcome_col <- 11
master[,outcome_col] <- as.numeric(master[,outcome_col])
master$Rank <- ave(master[,outcome_col], master$State, FUN=rank)
master_sorted <- master[with(master, order(master[,47], master[,2])),]
num = "worst"
length(master_sorted)
master_sorted[47,2]
master_sorted[47,]
master_sorted[46,]
min(master[,outcome_col])
class(outcome_col)
class(master[,outcome_col])
max(master[,outcome_col])
max(master[,outcome_col], na.rm=FALSE)
max(master[,outcome_col], na.rm=TRUE)
min(master[,outcome_col], na.rm=TRUE)
rankhospital("MD", "heart attack", "best")
nrows(master)
nrow(master)
?print
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
quit
bye()
exit
source('~/datasciencecoursera/ProgrammingAssignment3/rankhospital.R')
